<?php

namespace Pokemon;

use Pokemon\Tipos\PokemonFogo;
use Pokemon\Tipos\PokemonAgua;
use Pokemon\Tipos\PokemonGrama;
use Pokemon\Tipos\PokemonEletrico;
use Pokemon\Tipos\PokemonGelo;

/**
 * Classe principal do sistema de Pok√©dex
 * Gerencia a interface CLI e coordena todas as opera√ß√µes
 * Aplica o princ√≠pio de abstra√ß√£o ao trabalhar com objetos Pokemon e Pokedex
 */
class SistemaPokedex
{
    // Propriedades privadas da classe
    private Pokedex $pokedex; // Objeto Pokedex para gerenciar Pok√©mon
    private bool $sistemaAtivo; // Flag para controlar se o sistema est√° ativo

    /**
     * Construtor da classe SistemaPokedex
     * Inicializa a Pok√©dex e define o sistema como ativo
     */
    public function __construct()
    {
        $this->pokedex = new Pokedex(); // Cria nova inst√¢ncia da Pokedex
        $this->sistemaAtivo = true; // Define sistema como ativo
    }

    /**
     * M√©todo principal que inicia o sistema
     * Exibe boas-vindas e inicia o loop do menu
     */
    public function iniciar(): void
    {
        $this->exibirBoasVindas(); // Exibe mensagem de boas-vindas
        
        // Loop principal do sistema
        while ($this->sistemaAtivo) {
            $this->exibirMenu(); // Exibe o menu de op√ß√µes
            $opcao = $this->lerOpcao(); // L√™ a op√ß√£o do usu√°rio
            $this->processarOpcao($opcao); // Processa a op√ß√£o escolhida
        }
        
        $this->exibirDespedida(); // Exibe mensagem de despedida
    }

    /**
     * M√©todo para exibir mensagem de boas-vindas
     */
    private function exibirBoasVindas(): void
    {
        echo "\n";
        echo "========================================\n";
        echo "    üéÆ SISTEMA DE POK√âDEX üéÆ\n";
        echo "========================================\n";
        echo "Bem-vindo ao sistema de gerenciamento de Pok√©mon!\n";
        echo "Aqui voc√™ pode cadastrar, buscar e gerenciar seus Pok√©mon.\n";
        echo "========================================\n\n";
    }

    /**
     * M√©todo para exibir o menu principal
     */
    private function exibirMenu(): void
    {
        echo "\n--- MENU PRINCIPAL ---\n";
        echo "1. Cadastrar novo Pok√©mon\n";
        echo "2. Buscar Pok√©mon por n√∫mero\n";
        echo "3. Buscar Pok√©mon por nome\n";
        echo "4. Buscar Pok√©mon por tipo\n";
        echo "5. Listar todos os Pok√©mon\n";
        echo "6. Exibir estat√≠sticas da Pok√©dex\n";
        echo "7. Cadastrar Pok√©mon de exemplo\n";
        echo "8. Gerenciar dados salvos\n";
        echo "0. Sair do sistema\n";
        echo "----------------------\n";
    }

    /**
     * M√©todo para ler a op√ß√£o do usu√°rio
     * @return int Op√ß√£o escolhida pelo usu√°rio
     */
    private function lerOpcao(): int
    {
        $opcao = readline("Digite sua op√ß√£o: "); // L√™ entrada do usu√°rio
        return (int) $opcao; // Converte para inteiro (type casting)
    }

    /**
     * M√©todo para processar a op√ß√£o escolhida pelo usu√°rio
     * @param int $opcao Op√ß√£o escolhida
     */
    private function processarOpcao(int $opcao): void
    {
        switch ($opcao) {
            case 1:
                $this->cadastrarPokemon(); // Chama m√©todo para cadastrar Pok√©mon
                break;
            case 2:
                $this->buscarPorNumero(); // Chama m√©todo para buscar por n√∫mero
                break;
            case 3:
                $this->buscarPorNome(); // Chama m√©todo para buscar por nome
                break;
            case 4:
                $this->buscarPorTipo(); // Chama m√©todo para buscar por tipo
                break;
            case 5:
                $this->listarTodos(); // Chama m√©todo para listar todos
                break;
            case 6:
                $this->exibirEstatisticas(); // Chama m√©todo para exibir estat√≠sticas
                break;
            case 7:
                $this->cadastrarPokemonExemplo(); // Chama m√©todo para cadastrar exemplos
                break;
            case 8:
                $this->gerenciarDadosSalvos(); // Chama m√©todo para gerenciar dados
                break;
            case 0:
                $this->sairDoSistema(); // Chama m√©todo para sair
                break;
            default:
                echo "‚ùå Op√ß√£o inv√°lida! Tente novamente.\n"; // Mensagem de erro
        }
    }

    /**
     * M√©todo para cadastrar um novo Pok√©mon
     */
    private function cadastrarPokemon(): void
    {
        echo "\n--- CADASTRAR NOVO POK√âMON ---\n";
        
        // L√™ dados do Pok√©mon
        $nome = readline("Nome do Pok√©mon: ");
        $descricao = readline("Descri√ß√£o: ");
        $numero = (int) readline("N√∫mero na Pok√©dex: "); // Type casting para inteiro
        $altura = (float) readline("Altura (metros): "); // Type casting para float
        $peso = (float) readline("Peso (kg): "); // Type casting para float
        
        // Menu para escolher o tipo
        echo "\nTipos dispon√≠veis:\n";
        echo "1. Fogo\n";
        echo "2. √Ågua\n";
        echo "3. Grama\n";
        echo "4. El√©trico\n";
        echo "5. Gelo\n";
        
        $tipoOpcao = (int) readline("Escolha o tipo (1-5): "); // Type casting para inteiro
        
        // Cria Pok√©mon baseado no tipo escolhido
        $pokemon = $this->criarPokemonPorTipo($tipoOpcao, $nome, $descricao, $numero, $altura, $peso);
        
        if ($pokemon === null) {
            echo "‚ùå Tipo inv√°lido!\n";
            return;
        }
        
        // Tenta adicionar √† Pok√©dex
        if ($this->pokedex->adicionarPokemon($pokemon)) {
            echo "‚úÖ Pok√©mon cadastrado com sucesso!\n";
        } else {
            echo "‚ùå Erro: J√° existe um Pok√©mon com este n√∫mero!\n";
        }
    }

    /**
     * M√©todo para criar Pok√©mon baseado no tipo escolhido
     * @param int $tipoOpcao Op√ß√£o do tipo
     * @param string $nome Nome do Pok√©mon
     * @param string $descricao Descri√ß√£o do Pok√©mon
     * @param int $numero N√∫mero na Pok√©dex
     * @param float $altura Altura em metros
     * @param float $peso Peso em quilogramas
     * @return Pokemon|null Pok√©mon criado ou null se tipo inv√°lido
     */
    private function criarPokemonPorTipo(int $tipoOpcao, string $nome, string $descricao, int $numero, float $altura, float $peso): ?Pokemon
    {
        // Pergunta se quer tipo secund√°rio
        $temTipoSecundario = readline("Deseja adicionar um tipo secund√°rio? (s/n): ");
        $tipoSecundario = null;
        
        if (strtolower($temTipoSecundario) === 's') {
            $tipoSecundario = $this->escolherTipoSecundario();
        }

        switch ($tipoOpcao) {
            case 1: // Fogo
                return new PokemonFogo($nome, $descricao, $numero, $altura, $peso, $tipoSecundario);
            case 2: // √Ågua
                return new PokemonAgua($nome, $descricao, $numero, $altura, $peso, $tipoSecundario);
            case 3: // Grama
                return new PokemonGrama($nome, $descricao, $numero, $altura, $peso, $tipoSecundario);
            case 4: // El√©trico
                return new PokemonEletrico($nome, $descricao, $numero, $altura, $peso, $tipoSecundario);
            case 5: // Gelo
                return new PokemonGelo($nome, $descricao, $numero, $altura, $peso, $tipoSecundario);
            default:
                return null; // Tipo inv√°lido
        }
    }

    /**
     * M√©todo para escolher tipo secund√°rio
     * @return Tipo|null Tipo secund√°rio escolhido ou null
     */
    private function escolherTipoSecundario(): ?Tipo
    {
        echo "\nTipos dispon√≠veis para tipo secund√°rio:\n";
        echo "1. Fogo\n";
        echo "2. √Ågua\n";
        echo "3. Grama\n";
        echo "4. El√©trico\n";
        echo "5. Gelo\n";
        
        $tipoOpcao = (int) readline("Escolha o tipo secund√°rio (1-5): ");
        
        switch ($tipoOpcao) {
            case 1: // Fogo
                return new Tipo("Fogo", "Vermelho", ["√Ågua", "Terra"], ["Grama", "Gelo", "A√ßo"]);
            case 2: // √Ågua
                return new Tipo("√Ågua", "Azul", ["Grama", "El√©trico"], ["Fogo", "Terra", "Pedra"]);
            case 3: // Grama
                return new Tipo("Grama", "Verde", ["Fogo", "Gelo", "Venenoso", "Voador", "Inseto"], ["√Ågua", "Terra", "Pedra", "El√©trico"]);
            case 4: // El√©trico
                return new Tipo("El√©trico", "Amarelo", ["Terra"], ["Voador", "√Ågua", "A√ßo"]);
            case 5: // Gelo
                return new Tipo("Gelo", "Azul Claro", ["Fogo", "Lutador", "Pedra", "A√ßo"], ["Grama", "Terra", "Voador", "Drag√£o"]);
            default:
                return null; // Tipo inv√°lido
        }
    }

    /**
     * M√©todo para buscar Pok√©mon por n√∫mero
     */
    private function buscarPorNumero(): void
    {
        echo "\n--- BUSCAR POR N√öMERO ---\n";
        $numero = (int) readline("Digite o n√∫mero do Pok√©mon: "); // Type casting para inteiro
        
        $pokemon = $this->pokedex->buscarPorNumero($numero);
        
        if ($pokemon !== null) {
            echo "\n" . $pokemon->exibirInformacoes() . "\n";
        } else {
            echo "‚ùå Pok√©mon n√£o encontrado!\n";
        }
    }

    /**
     * M√©todo para buscar Pok√©mon por nome
     */
    private function buscarPorNome(): void
    {
        echo "\n--- BUSCAR POR NOME ---\n";
        $nome = readline("Digite o nome do Pok√©mon: ");
        
        $pokemons = $this->pokedex->buscarPorNome($nome);
        
        if (!empty($pokemons)) {
            echo "\nPok√©mon encontrados:\n";
            foreach ($pokemons as $pokemon) {
                echo "- " . $pokemon->exibirResumo() . "\n";
            }
        } else {
            echo "‚ùå Nenhum Pok√©mon encontrado!\n";
        }
    }

    /**
     * M√©todo para buscar Pok√©mon por tipo
     */
    private function buscarPorTipo(): void
    {
        echo "\n--- BUSCAR POR TIPO ---\n";
        echo "Tipos dispon√≠veis: Fogo, √Ågua, Grama, El√©trico, Gelo\n";
        $tipo = readline("Digite o tipo: ");
        
        $pokemons = $this->pokedex->buscarPorTipo($tipo);
        
        if (!empty($pokemons)) {
            echo "\nPok√©mon do tipo {$tipo}:\n";
            foreach ($pokemons as $pokemon) {
                echo "- " . $pokemon->exibirResumo() . "\n";
            }
        } else {
            echo "‚ùå Nenhum Pok√©mon do tipo {$tipo} encontrado!\n";
        }
    }

    /**
     * M√©todo para listar todos os Pok√©mon
     */
    private function listarTodos(): void
    {
        echo "\n--- TODOS OS POK√âMON ---\n";
        
        if ($this->pokedex->estaVazia()) {
            echo "A Pok√©dex est√° vazia!\n";
            return;
        }
        
        $pokemons = $this->pokedex->listarTodos();
        
        foreach ($pokemons as $pokemon) {
            echo $pokemon->exibirResumo() . "\n";
        }
    }

    /**
     * M√©todo para exibir estat√≠sticas da Pok√©dex
     */
    private function exibirEstatisticas(): void
    {
        echo "\n" . $this->pokedex->exibirRelatorio() . "\n";
    }

    /**
     * M√©todo para cadastrar Pok√©mon de exemplo
     */
    private function cadastrarPokemonExemplo(): void
    {
        echo "\n--- CADASTRANDO POK√âMON DE EXEMPLO ---\n";
        
        // Cria Pok√©mon de exemplo para cada tipo (alguns com tipos duplos)
        $exemplos = [
            new PokemonFogo("Charmander", "Um Pok√©mon de fogo com chama na cauda", 4, 0.6, 8.5),
            new PokemonAgua("Squirtle", "Um Pok√©mon de √°gua com casco resistente", 7, 0.5, 9.0),
            new PokemonGrama("Bulbasaur", "Um Pok√©mon de grama com semente nas costas", 1, 0.7, 6.9),
            new PokemonEletrico("Pikachu", "Um Pok√©mon el√©trico amarelo e fofo", 25, 0.4, 6.0),
            new PokemonGelo("Jynx", "Um Pok√©mon de gelo com poderes ps√≠quicos", 124, 1.4, 40.6),
            // Exemplos com tipos duplos
            new PokemonFogo("Charizard", "Um drag√£o de fogo voador", 6, 1.7, 90.5, new Tipo("Voador", "Azul", ["El√©trico", "Gelo", "Pedra"], ["Grama", "Lutador", "Inseto"])),
            new PokemonAgua("Blastoise", "Uma tartaruga de √°gua com canh√µes", 9, 1.6, 85.5, new Tipo("A√ßo", "Cinza", ["Fogo", "Lutador", "Terra"], ["Grama", "Gelo", "Voador", "Ps√≠quico", "Inseto", "Pedra", "Drag√£o", "A√ßo", "Fada"]))
        ];
        
        $cadastrados = 0;
        foreach ($exemplos as $pokemon) {
            if ($this->pokedex->adicionarPokemon($pokemon)) {
                $cadastrados++;
            }
        }
        
        echo "‚úÖ {$cadastrados} Pok√©mon de exemplo cadastrados com sucesso!\n";
    }

    /**
     * M√©todo para sair do sistema
     */
    private function sairDoSistema(): void
    {
        $this->sistemaAtivo = false; // Define sistema como inativo
    }

    /**
     * M√©todo para gerenciar dados salvos
     */
    private function gerenciarDadosSalvos(): void
    {
        echo "\n--- GERENCIAR DADOS SALVOS ---\n";
        echo "1. Exibir informa√ß√µes do arquivo\n";
        echo "2. Fazer backup dos dados\n";
        echo "3. Recarregar dados do arquivo\n";
        echo "4. Limpar todos os dados\n";
        echo "0. Voltar ao menu principal\n";
        echo "-----------------------------\n";
        
        $opcao = (int) readline("Escolha uma op√ß√£o: ");
        
        switch ($opcao) {
            case 1:
                $this->exibirInformacoesArquivo();
                break;
            case 2:
                $this->fazerBackup();
                break;
            case 3:
                $this->recarregarDados();
                break;
            case 4:
                $this->limparDados();
                break;
            case 0:
                return; // Volta ao menu principal
            default:
                echo "‚ùå Op√ß√£o inv√°lida!\n";
        }
    }

    /**
     * M√©todo para exibir informa√ß√µes do arquivo de dados
     */
    private function exibirInformacoesArquivo(): void
    {
        $info = $this->pokedex->obterInformacoesArquivo();
        
        echo "\n--- INFORMA√á√ïES DO ARQUIVO ---\n";
        echo "Arquivo existe: " . ($info['existe'] ? 'Sim' : 'N√£o') . "\n";
        echo "Caminho: {$info['caminho']}\n";
        
        if ($info['existe']) {
            echo "Tamanho: " . number_format($info['tamanho'] / 1024, 2) . " KB\n";
            echo "√öltima modifica√ß√£o: {$info['modificado']}\n";
        }
        echo "-----------------------------\n";
    }

    /**
     * M√©todo para fazer backup dos dados
     */
    private function fazerBackup(): void
    {
        if ($this->pokedex->fazerBackup()) {
            echo "‚úÖ Backup criado com sucesso!\n";
        } else {
            echo "‚ùå Erro ao criar backup!\n";
        }
    }

    /**
     * M√©todo para recarregar dados do arquivo
     */
    private function recarregarDados(): void
    {
        if ($this->pokedex->carregarDados()) {
            echo "‚úÖ Dados recarregados com sucesso!\n";
        } else {
            echo "‚ùå Erro ao recarregar dados!\n";
        }
    }

    /**
     * M√©todo para limpar todos os dados
     */
    private function limparDados(): void
    {
        echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o ir√° deletar TODOS os dados salvos!\n";
        $confirmacao = readline("Digite 'CONFIRMAR' para continuar: ");
        
        if ($confirmacao === 'CONFIRMAR') {
            if ($this->pokedex->limparTodosDados()) {
                echo "‚úÖ Todos os dados foram removidos!\n";
            } else {
                echo "‚ùå Erro ao limpar dados!\n";
            }
        } else {
            echo "‚ùå Opera√ß√£o cancelada.\n";
        }
    }

    /**
     * M√©todo para exibir mensagem de despedida
     */
    private function exibirDespedida(): void
    {
        echo "\n========================================\n";
        echo "    üëã OBRIGADO POR USAR A POK√âDEX! üëã\n";
        echo "========================================\n";
        echo "At√© a pr√≥xima, Treinador Pok√©mon!\n";
        echo "========================================\n\n";
    }
}
